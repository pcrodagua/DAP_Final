download.file('http://www.rossmanchance.com/iscam2/ddata/movies03RT.txt', destfile = 'movies.txt')
movies <- read.table('moviestxt', setp='\t', header = T, quote = '')
head(movies)
download.file('http://www.rossmanchance.com/iscam2/data/movies03RT.txt', destfile = 'movies.txt')
movies <- read.table('moviestxt', setp='\t', header = T, quote = '')
movies <- read.table('moviestxt', sep='\t', header = T, quote = '')
movies <- read.table('movies.txt', sep='\t', header = T, quote = '')
head(movies)
# -------------------------------------------
# F value explica la varianza (el primero)
# F value del segundo varianza adicional que explica (saber si aporta)
# El orden realmente importa
# -------------------------------------------
aovObject <- aov(movies$score ~movies$rating)
aovObject
summary(aovObject)
# -------------------------------------------
# agregamos una segunda variable
aovObject2 <- aov(movies$score ~movies$rating + movies$genre)
aovObject2
summary(aovObject2)
download.file('http://www.rossmanchance.com/iscam2/data/movies03RT.txt', destfile = 'movies.txt')
movies <- read.table('movies.txt', sep='\t', header = T, quote = '')
head(movies)
# -------------------------------------------
# F value explica la varianza (el primero)
# F value del segundo varianza adicional que explica (saber si aporta)
# El orden realmente importa
# -------------------------------------------
aovObject <- aov(movies$score ~movies$rating)
aovObject
summary(aovObject)
# -------------------------------------------
# agregamos una segunda variable
aovObject2 <- aov(movies$score ~movies$rating + movies$genre)
aovObject2
summary(aovObject2)
# el orden importa
aovObject3 <- aov(movies$score ~ movies$genre + movies$rating)
aovObject3
summary(aovObject3)
# el orden importa
aovObject4 <- aov(movies$score ~ movies$genre + movies$rating + movies$box.office)
aovObject4
summary(aovObject4)
aovObject5 <- aov(movies$score ~ movies$box.office  + movies$genre +movies$rating)
aovObject5
summary(aovObject5)
installed.packages('Hmisc')
installed.packages('SASxport')
install.packages('Hmisc')
install.packages('SASxport')
library(SASxport)
data('Downloads/DEMO_H.XPT')
data('/home/ospcx/Downloads/DEMO_H.XPT')
data('/home/ospcx/Downloads/')
lookup.xport("DEMO_H.XPT")
library(foreign)
data <- read.xport(file = '/home/ospcx/Downloads/DEMO_H.XPT')
head(data)
data
dim(data)
colnames(data)
library(foreign)
data <- read.xport(file = '/home/ospcx/Downloads/DIQ_H.XPT')
dim(data)
head(data)
library(foreign)
data <- read.xport(file = '/home/ospcx/Downloads/OHXDEN_H.XPT')
head(data)
data <- read.xport(file = '/home/ospcx/Downloads/OHXDEN_H.XPT')
head(data)
library(foreign)
data <- read.xport(file = '/home/ospcx/Downloads/OHXDEN_H.XPT')
head(data)
dim(data)
library(foreign)
OHXDEN_H <- read.xport(file = '/home/ospcx/Downloads/OHXDEN_H.XPT')
head(OHXDEN_H)
dim(OHXDEN_H)
DEMO_H <- read.xport(file = '/home/ospcx/Downloads/DEMO_H.XPT')
head(DEMO_H)
dim(DEMO_H)
colnames(DEMO_H)
colnames(OHXDEN_H)
OHXDEN_H$SEQN
OHXDEN_H$SEQN
DEMO_H$SEQN
merged.data <- merge(OHXDEN_H, DEMO_H, by=c("SEQN", "SEQN"))
merged.data
merged.data <- merge(DEMO_H, OHXDEN_H, by=c("SEQN", "SEQN"))
merged.data
dim(merged.data)
library(foreign)
OHXDEN_H <- read.xport(file = '/home/ospcx/Downloads/OHXDEN_H.XPT')
head(OHXDEN_H)
head(OHXDEN_H)
head(OHXDEN_H$OHX01TC)
merged.data <- merge(DEMO_H, OHXDEN_H, by=c("SEQN", "SEQN"))
dim(merged.data)
library(foreign)
OHXDEN_H <- read.xport(file = '/home/ospcx/Downloads/OHXDEN_H.XPT')
head(OHXDEN_H)
head(OHXDEN_H)
DEMO_H <- read.xport(file = '/home/ospcx/Downloads/DEMO_H.XPT')
head(OHXDEN_H$OHX01TC)
colnames(DEMO_H)
merged.data <- merge(DEMO_H, OHXDEN_H, by=c("SEQN", "SEQN"))
dim(merged.data)
merged.data <- merge(DEMO_H, OHXDEN_H, by=c("SEQN", "SEQN"))
dim(merged.data)
write.csv(merged.data, "nhanes.csv")
library(foreign)
OHXDEN_H <- read.xport(file = '/home/ospcx/Downloads/OHXDEN_H.XPT')
OHXDEN_H <- OHXDEN_H[order(SEQN),]
head(OHXDEN_H)
library(foreign)
OHXDEN_H <- read.xport(file = '/home/ospcx/Downloads/OHXDEN_H.XPT')
OHXDEN_H <- OHXDEN_H[order(OHXDEN_H$SEQN),]
head(OHXDEN_H)
library(foreign)
OHXDEN_H <- read.xport(file = '/home/ospcx/Downloads/OHXDEN_H.XPT')
OHXDEN_H <- OHXDEN_H[order(OHXDEN_H$SEQN),]
head(OHXDEN_H)
DEMO_H <- read.xport(file = '/home/ospcx/Downloads/DEMO_H.XPT')
DEMO_H <- DEMO_H[order(DEMO_H$SEQN),]
head(DEMO_H$SEQN)
library(foreign)
OHXDEN_H <- read.xport(file = '/home/ospcx/Downloads/OHXDEN_H.XPT')
OHXDEN_H <- OHXDEN_H[order(OHXDEN_H$SEQN),]
head(OHXDEN_H)
DEMO_H <- read.xport(file = '/home/ospcx/Downloads/DEMO_H.XPT')
DEMO_H <- DEMO_H[order(DEMO_H$SEQN),]
head(DEMO_H$SEQN)
merged.data <- merge(DEMO_H, OHXDEN_H, by=c("SEQN", "SEQN"))
dim(merged.data)
write.csv(merged.data, "nhanes.csv")
library(foreign)
OHXDEN_H <- read.xport(file = '/home/ospcx/Downloads/OHXDEN_H.XPT')
OHXDEN_H <- OHXDEN_H[order(OHXDEN_H$SEQN),]
head(OHXDEN_H)
DEMO_H <- read.xport(file = '/home/ospcx/Downloads/DEMO_H.XPT')
DEMO_H <- DEMO_H[order(DEMO_H$SEQN),]
head(DEMO_H$SEQN)
merged.data <- merge(DEMO_H, OHXDEN_H, by=c("SEQN", "SEQN"))
dim(merged.data)
write.csv(merged.data, "nhanes.csv")
install.packages('tidyverse')
dim(OHXDEN_H)
dim(DEMO_H$SEQN)
DEMO_H <- read.xport(file = '/home/ospcx/Downloads/DEMO_H.XPT')
dim(DEMO_H$SEQN)
library(foreign)
OHXDEN_H <- read.xport(file = '/home/ospcx/Downloads/OHXDEN_H.XPT')
dim(OHXDEN_H)
DEMO_H <- read.xport(file = '/home/ospcx/Downloads/DEMO_H.XPT')
dim(DEMO_H)
merged.data <- merge(x=OHXDEN_H, y=DEMO_H, by.x = 'SEQN', by.y = 'SEQN', sort = TRUE)
dim(merged.data)
head(merged.data)
DEMO_H$RIDAGEMN
setwd("~/GitProyects/DAP_Final/anemia/src")
########### Galgo with Logistic regression ###########
library(galgo)
data <- read.csv(file='../data/clean/anemia_balanced_clean.csv')
data <- data.frame(data)
datosgalgo<-t(data[,1:(ncol(data)-1)])
clases <- data$ANEMIA
anemia_gg<-configBB.VarSel(data=datosgalgo,
classes=factor(unlist(clases)),
classification.method="nearcent",
saveVariable="anemia_gg",
saveFrequency=5,
saveFile="anemia_gg.Rdata",
goalFitness=0.95,
maxBigBangs=300,
maxGenerations=500, # for each BigBangs how generation will evolve the system
scale=FALSE)
blast(anemia_gg)
fsm <- forwardSelectionModels(bb.nc)
fsm$models
fsm <- forwardSelectionModels(anemia_gg)
fsm$models
colnames(data[c(1,  6,  8,  9, 15)])
plot(bb.nc, type="fitness")
plot(anemia_gg, type="fitness")
plot(anemia_gg)
par(mfrow=c(2,1))
plot(anemia_gg, type="fitness", filter="solutions")
plot(anemia_gg, type="fitness", filter="nosolutions")
plot(anemia_gg, type="confusion")
